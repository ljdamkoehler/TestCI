# Luke Damkoehler for CCI Systems (12/14/2023):
# This pipeline is responsible for ensuring that all changed 
# python files in a PR pass the bandit security check. This
# check should be a required on for the repo. This pipeline 
# has two companion python scripts:

# utils/workflows/get_modified_files.py - gets the files modified 
# in the given PR.

# utils/workflows/check_bandit_report.py - checks the json report 
# generated by Bandit and determines whether this check should 
# pass or fail

name: Run Bandit on Modified Python Files

on:
# Run this on pull requests each time they are updated or created and contain 
# at least one python file.
  pull_request:
    paths:
      - '**.py'

jobs:
  bandit:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Get Python Files Modified in PR
      id: get_pr_files
      # Call a script to get files modified in the PR. Save those modified
      # filenames to $modified_files.
      run: |
        echo "Fetching modified Python files..."
        modified_files=$(python utils/workflows/get_modified_files.py)
        echo "::set-output name=modified_files::$modified_files"
      shell: bash
      # Install bandit into the environment.
    - name: Install Bandit
      run: |
        echo "Installing Bandit..."
        pip install bandit
      shell: bash

    - name: Run Bandit
      if: steps.get_pr_files.outputs.modified_files != ''
      continue-on-error: true
      # Run bandit on all python files in the PR and save the bandit output to
      # bandit_report.json
      run: |
        echo "Running Bandit on these modified Python files..."
        echo ${{ steps.get_pr_files.outputs.modified_files }}
        bandit -r -f json -o bandit_report.json ${{ steps.get_pr_files.outputs.modified_files }}
      shell: bash
      # Call a python script to evaluate the results of bandit that were stored in bandit_report.json.
    - name: Check Bandit Report for Issues
      run: python utils/workflows/check_bandit_report.py
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
